
#include <iostream>
#include <string>
#include <vector>
#include <fstream>
#include <sstream>

#include "configstring/configstring.h"

using namespace configstring;
using namespace std;

#define ANSI_COLORS

#ifdef ANSI_COLORS
#define FMT_RESET "\033[0m"
#define FMT_NULL "\033[35m"
#define FMT_BOOL_TRUE "\033[32m"
#define FMT_BOOL_FALSE "\033[31m"
#define FMT_NUMBER "\033[36m"
#define FMT_STRING "\033[33m"
#else
#define FMT_RESET ""
#define FMT_NULL ""
#define FMT_BOOL_TRUE ""
#define FMT_BOOL_FALSE ""
#define FMT_NUMBER ""
#define FMT_STRING ""
#endif

int main() {
    ifstream source("sample.cfg");

    if(source.fail()) {
        cout << "File error" << endl;
        //error
        return 1;
    }

    stringstream buffer;
    buffer << source.rdbuf();
    source.close();

    string sourceText = buffer.str();

    cout << boolalpha;
    auto result = parse(sourceText);
    for(auto key : result.keys()) {
        Value* value = result.get(key);
        cout << key << " = ";
        if (const auto N = value->as<Number>()) {
            std::cout << FMT_NUMBER << N->getValue() << FMT_RESET << " (number)" << endl;
        } else if (const auto B = value->as<Boolean>()) {
            std::cout << (B->getValue() ? FMT_BOOL_TRUE : FMT_BOOL_FALSE) << B->getValue() << FMT_RESET << " (boolean)" << endl;
        } else if (const auto S = value->as<String>()) {
            std::cout << FMT_STRING << '"' << S->getValue() << '"' << FMT_RESET << " (string)" << endl;
        } else if (const auto num = value->as<Null>()) {
            std::cout << FMT_NULL << "null" << FMT_RESET << endl;
        }
    }

    ConfigObject foo;
    foo.set("mystr", new String("wow"));
    foo.set("x", new Null);
    //cout << foo.stringify() << endl;
     cout << configstring::stringify(foo) << endl;
}
